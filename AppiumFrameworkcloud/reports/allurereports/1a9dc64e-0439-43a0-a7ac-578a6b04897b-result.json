{"name": "test_openLoginScreen", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Misconfigured -- Invalid type received for 'platformVersion', got '10.0' of type '<type 'float'>' but Sauce OnDemand expects 'string'.\n\nThe following desired capabilities were received:\n{'appium:app': 'storage:filename=Android_Demo_App.apk',\n 'appium:automationName': 'UiAutomator2',\n 'appium:deviceName': 'Google Pixel 3a XL GoogleAPI Emulator',\n 'appium:platformVersion': 10.0,\n 'platformName': 'Android',\n 'sauce:options': {'appiumVersion': '1.17.1',\n                   'build': 'v1.1',\n                   'name': 'appium android test framework'}}", "trace": "request = <SubRequest 'beforeClass' for <TestCaseFunction test_loginFailMethod>>\n\n    @pytest.fixture(scope='class')\n    def beforeClass(request):\n        print('Before Class')\n        driver1 = Driver()\n        #driver = driver1.getDriverMethod()\n>       driver=driver1.getcloudDriver(dc.platformVersion,dc.pName)\n\nconftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\base\\DriverClass.py:35: in getcloudDriver\n    driver = webdriver.Remote(url, caps, keep_alive=True)\n..\\..\\..\\pythonselenium\\venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:230: in __init__\n    super().__init__(\n..\\..\\..\\pythonselenium\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\n..\\..\\..\\pythonselenium\\venv\\lib\\site-packages\\appium\\webdriver\\webdriver.py:320: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n..\\..\\..\\pythonselenium\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CAEA44E6D0>\nresponse = {'status': 403, 'value': \"Misconfigured -- Invalid type received for 'platformVersion', got '10.0' of type '<type 'flo...ersion': '1.17.1',\\n                   'build': 'v1.1',\\n                   'name': 'appium android test framework'}}\"}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: Misconfigured -- Invalid type received for 'platformVersion', got '10.0' of type '<type 'float'>' but Sauce OnDemand expects 'string'.\nE           \nE           The following desired capabilities were received:\nE           {'appium:app': 'storage:filename=Android_Demo_App.apk',\nE            'appium:automationName': 'UiAutomator2',\nE            'appium:deviceName': 'Google Pixel 3a XL GoogleAPI Emulator',\nE            'appium:platformVersion': 10.0,\nE            'platformName': 'Android',\nE            'sauce:options': {'appiumVersion': '1.17.1',\nE                              'build': 'v1.1',\nE                              'name': 'appium android test framework'}}\n\n..\\..\\..\\pythonselenium\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:213: WebDriverException"}, "start": 1673398561525, "stop": 1673398561525, "uuid": "212dff02-4095-4c7b-8429-2c5af42f8667", "historyId": "aa124ced1de18a492d1938469d992e33", "testCaseId": "2959dcd5655e5ad47f89de200335edab", "fullName": "TestSuite.LoginTest#test_openLoginScreen", "labels": [{"name": "tag", "value": "run(order=4)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "LoginTest"}, {"name": "host", "value": "DESKTOP-CL62PMK"}, {"name": "thread", "value": "1752-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}